<?xml version="1.0"?>
<bindings xmlns="http://www.mozilla.org/xbl"
    xmlns:xbl="http://www.mozilla.org/xbl"
    xmlns:html = "http://www.w3.org/1999/xhtml"
    xmlns:xul  = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
    xmlns:svg  = "http://www.w3.org/2000/svg"
    xmlns:xlink= "http://www.w3.org/1999/xlink">

<script>
</script>

  <binding id="slideshow" display='xul:box'>
    <content>
       <xul:slide class="slide" anonid='img1' flex='1' xbl:inherits="top,left,width,height"/>
    </content>

    <resources>
      <stylesheet src="chrome://maavis/skin/slideshow.css"/>
    </resources>

    <implementation>
     <constructor><![CDATA[
        this._item = null;
        this._poller = null;
        this._playlist = [];

        this._setBroadcaster();
        
        //var frame= document.getAnonymousElementByAttribute(this, 'anonid', 'frame');
        var mythis = this    
        function showImage()
        {
            if (mythis._readyFunc)
            {
                setTimeout(mythis._readyFunc, 1);
            }
        }
        setTimeout(showImage, 100); // so layout completes without image
        ]]>
     </constructor> 

   <property name="onPlayerReady"   
            onget="return this._readyFunc;// attrib converts everthing to a string"
            onset="this._readyFunc = val; return val;"/>

   <property name="isPlaying" readonly="true"   
            onget="return (this._poller != null) ? 'true' : 'false';" />

    <property name="rate"
            onget="return this.getAttribute('rate')"
            onset="this.setAttribute('rate', val); return val;"/>

   <method name='_setBroadcaster'>
    <body><![CDATA[
        const broadcasterId = this.id+'_bc';
        if (document.getElementById(broadcasterId) == undefined) // TODO: only one, destructor
        {
            const bc = document.createElement("broadcaster");
            bc.setAttribute("isPlaying", "false");
            bc.id = broadcasterId;
            this.parentNode.appendChild(bc);
            this.bc = bc;
        }
        else
            this.bc = document.getElementById(broadcasterId);
        
        ]]>
    </body>
    </method>

   <method name='_broadcast'>
    <parameter name="playing" />
    <body><![CDATA[
        this.bc.setAttribute("isPlaying", playing);
        ]]>
    </body>
    </method>

   <method name='play'>
    <parameter name="args" />
    <body><![CDATA[
        this._playlist = [];
        Components.utils.import("resource://modules/utils.js");
        const that = this;
        function addToPlaylist(mrl)
        {
            if (isArray(mrl))
            {
                function addToPlaylist(amrl)
                {
                   that._playlist.push(amrl);
                }
                mrl.forEach(addToPlaylist);
            }
            else
            {
                var item = that._playlist.push(mrl);
            }
        }
        args.forEach(addToPlaylist);
        
        this._startPlaying();
        ]]>
    </body>
    </method>

   <method name='_showNext'>
    <parameter name="back"/>
    <body><![CDATA[
        if (this._item == null) 
            this._item = -1;
        if (back)
        {
            this._item -= 1;
            if (this._item < 0)
                this._item = this._playlist.length-1;
        }
        else
        {
            this._item += 1;
            if (this._item == this._playlist.length)
                this._item = 0;
        }
        this._showCurrent()
        ]]>
    </body>
    </method>

   <method name='_showCurrent'>
    <body><![CDATA[
        if (this._item == null) 
            return;
            
        const img = document.getAnonymousElementByAttribute(this, 'anonid', 'img1');
        img.image = this._playlist[this._item];
        ]]>
    </body>
    </method>

    <method name='_startPlaying'>
    <body><![CDATA[
        const prevState = (this._poller != null);
        if (!this._poller)
        {
            const that = this;
            const rate = (this.rate == "") ? 5 : this.rate;
            const msrate = rate * 1000;
            this._poller = setInterval(function(){that._showNext();}, msrate);
        }
        this._showNext();   // show first
        this._broadcast("true");
        return prevState;
        ]]>
    </body>
    </method>
            
   <method name='_stopPlaying'>
    <body><![CDATA[
        const prevState = (this._poller != null);
        if (this._poller)
        {
            clearInterval(this._poller);
            this._poller = null;
        }
        this._broadcast("false");
        return prevState;
        ]]>
    </body>
    </method>
            
   <method name='stop'>
     <body><![CDATA[
        this.stopPlaying();
        ]]>
    </body>
    </method>
 
   <method name='togglePause'>
     <body><![CDATA[
        if (this._poller)
        {
            this._stopPlaying();
        }
        else
        {
            this._startPlaying();
        }
        ]]>
    </body>
    </method>
 
   <method name='restart'>
    <body><![CDATA[
        this._stopPlaying();
        this._item = null;
        this._startPlaying();
        ]]>
    </body>
    </method>
  
  <method name='prevItem'>
    <body><![CDATA[ // TODO sort out interaction with poller
        const wasPlaying = this._stopPlaying();
        this._showNext(back=true);
//        if (wasPlaying)
//            this.startPlaying();
        ]]>
    </body>
    </method>

  <method name='nextItem'>
    <body><![CDATA[
        const wasPlaying = this._stopPlaying();
        this._showNext();
//        if (wasPlaying)
//            this.startPlaying();
        ]]>
    </body>
    </method>

  </implementation>

  </binding>

  <binding id="slide" display='xul:box'>
    <content>
      <xul:vbox anonid='image-frame' flex='1' />
    </content>

    <resources>
      <stylesheet src="chrome://maavis/skin/slideshow.css"/>
    </resources>

    <implementation>
    
    <property name="image"
            onget="return this.getAttribute('image')"
            onset="this.setAttribute('image', val); this.scaleImage(); return val;"/>

    <property name="image-scale"
            onget="return this.getAttribute('image-scale')"
            onset="this.setAttribute('image-scale', val); return val;"/>

    <constructor><![CDATA[
        ]]>
     </constructor> 

      <method name="scaleImage">
        <body><![CDATA[
          const scale = (!isNaN(this.image-scale)) ? this.image-scale : 1; // TODO why Nan and not empty string?
          const imageFrame = document.getAnonymousElementByAttribute(this, 'anonid', 'image-frame');
          if (!imageFrame)
            throw "XBL binding for <type=\"slide\"/> binding must contain an element with anonid=\"image-frame\"";
          var src = this.getAttribute('image');
          if (src)
          {
              var config = {};
              Components.utils.import("resource://modules/config.js", config);
              src = config.parseURI(src); // TODO review bad design having this here
              
              function setImageSizez()
              {
                // resize to fit keeping aspect ratio
                const imageWidth = this.naturalWidth;
                const imageHeight = this.naturalHeight;
                const availableWidth = imageFrame.boxObject.width; // note could also use getComputedStyle
                const availableHeight = imageFrame.boxObject.height;
                var width = availableWidth;
                var height = availableWidth * imageHeight / imageWidth;
                if (height > availableHeight)
                {
                    height = availableHeight;
                    width = availableHeight * imageWidth / imageHeight;
                }
                
                imageFrame.align='center';
                imageFrame.pack='center';

                function setImageSize()
                {
                    // add child image (xul:image) not HTML to avoid display problems
                    var i = document.createElement('image');
                    i.setAttribute('class', 'touchkey-image');
                    i.setAttribute('src', src);
                    i.width = width * scale;
                    i.height = height * scale;
                    if (imageFrame.firstChild)
                      imageFrame.replaceChild(i, imageFrame.firstChild);
                    else
                      imageFrame.appendChild(i);
                }
                  
                setTimeout(setImageSize, 1); // seem to need this as well
              }
              
              // create a temp HTML img which includes the actual image size so we can keep aspect ratio
              var i = document.createElementNS("http://www.w3.org/1999/xhtml", 'img');
              i.setAttribute('src', src);
              i.onload = setImageSizez;
            }
        ]]>
        </body>
      </method>

  </implementation>

  </binding>
 
</bindings>

